name: Build My Reminders APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            openjdk-17-jdk \
            build-essential \
            git \
            zip \
            unzip \
            autoconf \
            automake \
            libtool \
            pkg-config \
            zlib1g-dev \
            libssl-dev \
            libffi-dev \
            libltdl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            ccache \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev

      - name: Setup Java Environment
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH

      - name: Verify Java Installation
        run: |
          java -version
          javac -version
          echo "JAVA_HOME: $JAVA_HOME"

      - name: Upgrade pip and Install Build Tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --upgrade cython==0.29.36
          pip install --upgrade buildozer==1.5.0
          pip install --upgrade virtualenv

      - name: Create Required Directories
        run: |
          mkdir -p assets/ringtones
          mkdir -p .buildozer
          echo "Directory structure created"
          ls -la

      - name: Cache Buildozer Global
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
          key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-global-

      - name: Cache Buildozer Local
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
          key: ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}-
            ${{ runner.os }}-buildozer-local-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        run: |
          # Create SDK directory structure
          mkdir -p ~/.buildozer/android/platform/android-sdk
          cd ~/.buildozer/android/platform/android-sdk
          
          # Download and setup Android SDK command-line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          
          # The zip extracts to a folder named 'cmdline-tools'
          # We need to move it to cmdline-tools/latest
          mkdir -p cmdline-tools-temp
          mv cmdline-tools cmdline-tools-temp/latest
          mv cmdline-tools-temp cmdline-tools
          
          # Set up environment variables
          export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          
          # Accept licenses
          mkdir -p licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> licenses/android-sdk-license
          echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > licenses/android-sdk-preview-license
          
          # Install SDK platform tools and build tools
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.0" || true
          
          # Create tools directory for buildozer compatibility
          mkdir -p tools/bin
          ln -sf ../../cmdline-tools/latest/bin/sdkmanager tools/bin/sdkmanager
          ln -sf ../../cmdline-tools/latest/bin/avdmanager tools/bin/avdmanager
          
          echo "Android SDK setup complete"
          ls -la cmdline-tools/

      - name: Build APK with Buildozer
        id: build
        continue-on-error: true
        run: |
          export USE_CCACHE=1
          export CCACHE_DIR=$HOME/.ccache
          export NDK_CCACHE=$(which ccache)
          export GRADLE_OPTS="-Dorg.gradle.jvmargs=-Xmx4096m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
          export ANDROIDSDK="$HOME/.buildozer/android/platform/android-sdk"
          export ANDROIDNDK="$HOME/.buildozer/android/platform/android-ndk-r25b"
          export ANDROIDAPI="33"
          export ANDROIDMINAPI="21"
          
          echo "==============================================="
          echo "Starting Buildozer Build"
          echo "==============================================="
          
          # Run buildozer with verbose output
          buildozer -v android debug 2>&1 | tee build_log.txt
          
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "Build exit code: $BUILD_EXIT_CODE"
          
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "build_status=success" >> $GITHUB_OUTPUT
          else
            echo "build_status=failed" >> $GITHUB_OUTPUT
          fi
          
          exit $BUILD_EXIT_CODE

      - name: Upload Build Log (Always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build_log.txt
          retention-days: 30

      - name: List All Build Files
        if: always()
        run: |
          echo "==============================================="
          echo "Searching for build outputs..."
          echo "==============================================="
          
          echo "Contents of current directory:"
          ls -lah
          
          echo -e "\nContents of bin directory (if exists):"
          ls -lah bin/ 2>/dev/null || echo "No bin directory found"
          
          echo -e "\nSearching for all APK files:"
          find . -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found"
          
          echo -e "\nSearching in .buildozer directory:"
          find .buildozer -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK in .buildozer"
          
          echo -e "\nBuildozer directory structure:"
          ls -lah .buildozer/ 2>/dev/null || echo "No .buildozer directory"

      - name: Copy APK to bin Directory
        if: always()
        run: |
          mkdir -p bin
          
          # Search for APK in various locations
          APK_FOUND=false
          
          # Check common buildozer locations
          if [ -d ".buildozer/android/platform/build-arm64-v8a/dists/myreminders/build/outputs/apk/debug" ]; then
            cp .buildozer/android/platform/build-arm64-v8a/dists/myreminders/build/outputs/apk/debug/*.apk bin/ 2>/dev/null && APK_FOUND=true
          fi
          
          if [ -d ".buildozer/android/platform/build-armeabi-v7a/dists/myreminders/build/outputs/apk/debug" ]; then
            cp .buildozer/android/platform/build-armeabi-v7a/dists/myreminders/build/outputs/apk/debug/*.apk bin/ 2>/dev/null && APK_FOUND=true
          fi
          
          # Alternative location
          find .buildozer -name "*.apk" -exec cp {} bin/ \; 2>/dev/null && APK_FOUND=true
          
          if [ "$APK_FOUND" = true ]; then
            echo "APK files copied to bin directory"
            ls -lah bin/
          else
            echo "No APK files found to copy"
            # Create a dummy file to prevent artifact upload failure
            echo "Build failed - no APK generated" > bin/BUILD_FAILED.txt
          fi

      - name: Rename APK with Version and Date
        if: success() && steps.build.outputs.build_status == 'success'
        run: |
          cd bin
          for apk in *.apk; do
            if [ -f "$apk" ]; then
              VERSION=$(grep "^version" ../buildozer.spec | cut -d'=' -f2 | tr -d ' ')
              DATE=$(date +%Y%m%d)
              NEW_NAME="MyReminders-v${VERSION}-${DATE}-${apk}"
              mv "$apk" "$NEW_NAME"
              echo "Renamed to: $NEW_NAME"
            fi
          done
          ls -lah

      - name: Upload APK Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MyReminders-APK
          path: bin/*
          if-no-files-found: warn
          retention-days: 90

      - name: Generate Build Summary
        if: always()
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.build.outputs.build_status }}" == "success" ]; then
            echo "✅ **Build Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Generated APK Files" >> $GITHUB_STEP_SUMMARY
            ls -lh bin/*.apk 2>/dev/null | awk '{print "- " $9 " (" $5 ")"}' >> $GITHUB_STEP_SUMMARY || echo "- No APK files found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Error Information" >> $GITHUB_STEP_SUMMARY
            echo "Check the build log artifact for detailed error messages." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Common Issues:" >> $GITHUB_STEP_SUMMARY
            echo "- Missing dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- NDK/SDK version mismatch" >> $GITHUB_STEP_SUMMARY
            echo "- Gradle build failures" >> $GITHUB_STEP_SUMMARY
            echo "- Python-for-android compilation errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- Java Version: 17" >> $GITHUB_STEP_SUMMARY
          echo "- Buildozer Version: 1.5.0" >> $GITHUB_STEP_SUMMARY
          echo "- Target API: 33" >> $GITHUB_STEP_SUMMARY
          echo "- Min API: 21" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/') && steps.build.outputs.build_status == 'success'
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*.apk
          body: |
            ## My Reminders APK Release
            
            **Version:** ${{ github.ref_name }}
            **Build Date:** ${{ github.event.head_commit.timestamp }}
            
            ### Installation Instructions
            1. Download the APK file
            2. Enable "Install from Unknown Sources" in Android settings
            3. Install the APK
            4. Grant necessary permissions
            
            ### What's New
            See CHANGELOG.md for details
            
            ### Requirements
            - Android 5.0 (API 21) or higher
            - ~50MB storage space
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-Build Cleanup
        if: always()
        run: |
          # Clean up large cache files to prevent storage issues
          du -sh .buildozer 2>/dev/null || echo "No .buildozer directory"
          du -sh ~/.buildozer 2>/dev/null || echo "No ~/.buildozer directory"
